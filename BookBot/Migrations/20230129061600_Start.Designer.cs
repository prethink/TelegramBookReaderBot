// <auto-generated />
using System;
using BookBot.Models.DataBase.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookBot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230129061600_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<long>("Authorsid")
                        .HasColumnType("bigint");

                    b.Property<long>("Booksid")
                        .HasColumnType("bigint");

                    b.HasKey("Authorsid", "Booksid");

                    b.HasIndex("Booksid");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.Author", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.Book", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.Genre", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.LinkStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("link");

                    b.Property<long>("RegCount")
                        .HasColumnType("bigint")
                        .HasColumnName("reg_count");

                    b.HasKey("Id");

                    b.ToTable("link_statistic");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.SettingsUser", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<int>("CurrentPage")
                        .HasColumnType("int")
                        .HasColumnName("current_page");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_repeat");

                    b.Property<DateTime>("NextNotifyTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_notify_time");

                    b.Property<TimeSpan>("RepeatTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("repeat_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("settings_user");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.UserBot", b =>
                {
                    b.Property<long>("TelegramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    b.Property<long>("Activity")
                        .HasColumnType("bigint")
                        .HasColumnName("activity");

                    b.Property<long?>("CurrentBookId")
                        .HasColumnType("bigint")
                        .HasColumnName("current_book_id");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsActivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBan")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_ban");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_activity");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("link");

                    b.Property<string>("Login")
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.Property<long?>("ParentUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_user_id");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("registered_date");

                    b.HasKey("TelegramId");

                    b.HasIndex("CurrentBookId");

                    b.HasIndex("ParentUserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<long>("Booksid")
                        .HasColumnType("bigint");

                    b.Property<long>("Genresid")
                        .HasColumnType("bigint");

                    b.HasKey("Booksid", "Genresid");

                    b.HasIndex("Genresid");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookUserBot", b =>
                {
                    b.Property<long>("Booksid")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersTelegramId")
                        .HasColumnType("bigint");

                    b.HasKey("Booksid", "UsersTelegramId");

                    b.HasIndex("UsersTelegramId");

                    b.ToTable("users_books", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookBot.Models.DataBase.Author", null)
                        .WithMany()
                        .HasForeignKey("Authorsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBot.Models.DataBase.Book", null)
                        .WithMany()
                        .HasForeignKey("Booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBot.Models.DataBase.SettingsUser", b =>
                {
                    b.HasOne("BookBot.Models.DataBase.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBot.Models.DataBase.UserBot", "User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookBot.Models.DataBase.UserBot", b =>
                {
                    b.HasOne("BookBot.Models.DataBase.Book", "CurrentBook")
                        .WithMany()
                        .HasForeignKey("CurrentBookId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BookBot.Models.DataBase.UserBot", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentBook");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookBot.Models.DataBase.Book", null)
                        .WithMany()
                        .HasForeignKey("Booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBot.Models.DataBase.Genre", null)
                        .WithMany()
                        .HasForeignKey("Genresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUserBot", b =>
                {
                    b.HasOne("BookBot.Models.DataBase.Book", null)
                        .WithMany()
                        .HasForeignKey("Booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBot.Models.DataBase.UserBot", null)
                        .WithMany()
                        .HasForeignKey("UsersTelegramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBot.Models.DataBase.UserBot", b =>
                {
                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
